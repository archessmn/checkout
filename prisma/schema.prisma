// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@map("posts")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    createdModules  Module[]
    createdDepartments  Department[]
    createdActivities   Activity[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Module {
    id          String      @id @default(cuid())
    code        String
    description String?

    departmentId    String
    createdById String

    createdBy   User   @relation(fields: [createdById], references: [id])
    department  Department? @relation(fields: [departmentId], references: [id])

    activities  Activity[]
    groups      ModuleGroup[]

    @@map("modules")
}

model Department {
    id          String      @id @default(cuid())
    name        String
    createdById String
    createdBy   User   @relation(fields: [createdById], references: [id])
    modules     Module[]
    activities  Activity[]

    @@map("departments")
}

model Activity {
    id          String      @id @default(cuid())
    description String
    startDateTime   DateTime
    endDateTime     DateTime
    duration    String
    type        String
    staff       String?
    location    String
    size        Int?
    reference   String
    details     String?

    moduleId    String?
    departmentId    String?
    createdById String
    weekNameId  String?
    groupId     String?

    module      Module?         @relation(fields: [moduleId], references: [id])
    department  Department?     @relation(fields: [departmentId], references: [id])
    createdBy   User            @relation(fields: [createdById], references: [id])
    weekName    WeekName?       @relation(fields: [weekNameId], references: [id])
    group       ModuleGroup?   @relation(fields: [groupId], references: [id])

    checkinCodes    CheckinCode[]   @relation()
    externalActivities  ExternalActivity[]

    @@map("activities")
}

model CheckinCode {
    id          String      @id @default(cuid())
    code        String
    score       Int         @default(0)
    submittedAt DateTime?   @default(now())

    activityId  String?
    activity    Activity?    @relation(fields: [activityId], references: [id])

    externalActivityId  String?
    externalActivity    ExternalActivity?    @relation(fields: [externalActivityId], references: [id])

    @@map("checkin_codes")
}

model WeekName {
    id          String      @id @default(cuid())
    name        String

    activities  Activity[]

    @@map("week_names")
}

model ModuleGroup {
    id          String      @id @default(cuid())
    groupNumber Int
    
    moduleId    String

    module      Module      @relation(fields: [moduleId], references: [id])

    activities  Activity[]

    @@map("module_groups")
}

model ExternalActivity {
    id          String      @id @default(cuid())
    time        String
    activity    String
    lecturer    String?
    space       String
    date        DateTime

    internalActivityId  String?
    internalActivity    Activity?    @relation(fields: [internalActivityId], references: [id])

    checkinCodes    CheckinCode[]


    @@map("external_activities")
}